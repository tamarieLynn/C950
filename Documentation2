F. Justification of Package Delivery Algorithm:
1.	Strengths of the Algorithm:
•	Greedy Approach: The algorithm employs a greedy approach by selecting the next package for delivery based on the closest distance to the current truck location. This can be advantageous in terms of simplicity and efficiency, as it optimizes for the immediate benefit at each step without considering the global context. Greedy algorithms often provide quick and feasible solutions.
•	Realistic Time Constraints: The algorithm factors in delivery deadlines and updates the status of packages based on their delivery times. This realistic representation of time constraints ensures that the delivered package statuses align with the specified time frames.
2.	Verification of Requirements:
•	Delivery Status Tracking: The algorithm successfully tracks and updates the delivery status of each package, including whether it's at the hub, en route, or delivered. The statuses are based on the calculated delivery times and deadlines, providing a comprehensive view of package movements.
•	Mileage Calculation: The algorithm accurately calculates and updates the mileage traveled by each truck, contributing to the overall tracking of the delivery process.
•	Time-Driven Operations: The algorithm considers time-driven operations, including departure times and travel times, aligning with the time-sensitive nature of package deliveries.
3.	Alternative Algorithms: a. Dijkstra's Algorithm:
•	Difference: Dijkstra's algorithm, a graph-based approach, could be an alternative. It optimizes for the shortest path between nodes in a graph, considering distances or weights. In the context of package delivery, it could find the most efficient route for each truck, potentially minimizing overall travel distance.
b. Genetic Algorithm:
•	Difference: Genetic algorithms are evolutionary algorithms inspired by natural selection. In this case, a genetic algorithm could model the evolution of possible routes, with chromosomes representing different delivery sequences. Through selection, crossover, and mutation operations, the algorithm could evolve towards more optimized delivery routes.
Both alternative algorithms differ significantly from the original greedy algorithm:
•	Dijkstra's Algorithm: Focuses on finding the shortest path in a graph, optimizing global efficiency rather than immediate local gains. It may provide more optimal routes but requires a comprehensive representation of the delivery network.
•	Genetic Algorithm: Utilizes an evolutionary approach, exploring multiple potential solutions simultaneously. This approach may be more exploratory and could lead to innovative delivery route optimizations, albeit with potentially higher computational complexity.
G.  Describe what you would do differently, other than the two algorithms identified in part F3, if you did this project again, including details of the modifications that would be made.

For a more structured and manageable project execution, I would adopt a sequential and focused approach, avoiding unnecessary back-and-forth between different project stages. Specifically:
1.	Sequential Task Handling:
•	Instead of attempting to handle multiple tasks simultaneously, I would break down the project into sequential steps, focusing on one task at a time. This would ensure a more systematic and organized development process.
2.	Unified File Structure:
•	Initially, I would concentrate all functionalities within a single file, say main.py, to maintain simplicity and clarity during the initial development phase. This would allow for a more straightforward understanding of the codebase and facilitate debugging.
3.	Gradual Refactoring:
•	After achieving functional completeness in the main file, I would embark on a gradual refactoring process. This involves restructuring the code by creating separate files for each class, promoting modularity and maintainability.
4.	Version Control Practices:
•	Implementing version control practices, such as using Git, would enable me to track changes systematically. This ensures that I can revert to previous states or explore alternative solutions without the fear of losing progress.
5.	Thorough Testing:
•	In each stage, I would conduct thorough testing to identify and rectify issues promptly. This would involve unit testing for individual classes and integration testing to ensure seamless collaboration among different components.
6.	Documentation:
•	Throughout the development process, I would prioritize comprehensive documentation. Clear and concise comments would be added to explain the rationale behind design decisions, the functionality of methods, and any potential caveats for future reference.
7.	User Input Handling:
•	Implementing robust user input handling mechanisms, including error checks and prompts for valid input, would enhance the program's usability and prevent unexpected behaviors.
By adopting these modifications, the project development would follow a more organized and transparent trajectory, reducing the likelihood of errors and making the codebase more scalable and maintainable in the long run.
H.  Verify that the data structure used in the solution meets all requirements in the scenario.
1.	Verification of Requirements:
•	Delivery Status Tracking: The algorithm successfully tracks and updates the delivery status of each package, including whether it's at the hub, en route, or delivered. The statuses are based on the calculated delivery times and deadlines, providing a comprehensive view of package movements.
•	Mileage Calculation: The algorithm accurately calculates and updates the mileage traveled by each truck, contributing to the overall tracking of the delivery process.
•	Time-Driven Operations: The algorithm considers time-driven operations, including departure times and travel times, aligning with the time-sensitive nature of package deliveries.

1.  Identify two other data structures that could meet the same requirements in the scenario.
a.  Describe how each data structure identified in H1 is different from the data structure used in the solution.
Alternative Algorithms:
 a. Dijkstra's Algorithm:
•	Difference: Dijkstra's algorithm, a graph-based approach, could be an alternative. It optimizes for the shortest path between nodes in a graph, considering distances or weights. In the context of package delivery, it could find the most efficient route for each truck, potentially minimizing overall travel distance.
b. Genetic Algorithm:
•	Difference: Genetic algorithms are evolutionary algorithms inspired by natural selection. In this case, a genetic algorithm could model the evolution of possible routes, with chromosomes representing different delivery sequences. Through selection, crossover, and mutation operations, the algorithm could evolve towards more optimized delivery routes.
Both alternative algorithms differ significantly from the original greedy algorithm:
•	Dijkstra's Algorithm: Focuses on finding the shortest path in a graph, optimizing global efficiency rather than immediate local gains. It may provide more optimal routes but requires a comprehensive representation of the delivery network.
•	Genetic Algorithm: Utilizes an evolutionary approach, exploring multiple potential solutions simultaneously. This approach may be more exploratory and could lead to innovative delivery route optimizations, albeit with potentially higher computational complexity.
I.  Acknowledge sources, using in-text citations and references, for content that is quoted, paraphrased, or summarized.
I used the  C950 Supplemental Resources for Task Directions, Recorded Webinars, Example of Project Implementation Step.
